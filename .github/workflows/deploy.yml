name: üöÄ Deploy FastAPI to Heroku

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: üì¶ Install dependencies (Poetry)
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi --no-root

      - name: üì• T√©l√©charger le mod√®le Hugging Face (optionnel)
        env:
          HUGGINGFACE_HUB_CACHE: ./hf_cache
        run: |
          poetry run python -c "from huggingface_hub import snapshot_download; snapshot_download(repo_id='cantalapiedra/semantic-segmentation-model', local_dir='./hf_cache')"

      - name: ‚úÖ Run tests
        run: |
          poetry run pytest

      - name: üîß Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: üîë Configure .netrc + Push to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        run: |
          # 1) G√©n√©rer un ~/.netrc incluant l'API Key comme "mot de passe"
          echo "machine api.heroku.com
          login $HEROKU_EMAIL
          password $HEROKU_API_KEY

          machine git.heroku.com
          login $HEROKU_EMAIL
          password $HEROKU_API_KEY
          " >> ~/.netrc

          # 2) Emp√™che Git de demander un login interactif
          git config --global credential.helper store

          # 3) Configure le remote heroku (HTTPS)
          heroku git:remote --app $HEROKU_APP_NAME

          # 4) Pousse le code (HEAD -> main) en for√ßant si besoin
          git push heroku HEAD:main -f
